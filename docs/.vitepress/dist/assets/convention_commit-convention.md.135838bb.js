import{_ as a,o as s,c as o,V as e}from"./chunks/framework.a1253909.js";const F=JSON.parse('{"title":"Git提交内容协议","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"convention/commit-convention.md","filePath":"convention/commit-convention.md"}'),n={name:"convention/commit-convention.md"},l=e('<h1 id="git提交内容协议" tabindex="-1">Git提交内容协议 <a class="header-anchor" href="#git提交内容协议" aria-label="Permalink to &quot;Git提交内容协议&quot;">​</a></h1><blockquote><p>这是根据<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular" target="_blank" rel="noreferrer">Angular的提交约定</a>改编的。</p></blockquote><h2 id="内容匹配规则" tabindex="-1">内容匹配规则 <a class="header-anchor" href="#内容匹配规则" aria-label="Permalink to &quot;内容匹配规则&quot;">​</a></h2><p>内容必须由以下正则表达式匹配：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">revert: </span><span style="color:#89DDFF;">)?(</span><span style="color:#C3E88D;">feat</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">fix</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">docs</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">dx</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">refactor</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">perf</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">workflow</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">ci</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">chore</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">types</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">wip</span><span style="color:#89DDFF;">)(</span><span style="color:#A6ACCD;">\\(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">\\)</span><span style="color:#89DDFF;">)?</span><span style="color:#C3E88D;">: .</span><span style="color:#89DDFF;">{1,50}/</span></span></code></pre></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>新增上传API</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">feat(api</span><span style="color:#A6ACCD;">): 新增上传API</span></span></code></pre></div><p>修复上传API，并带有<code>github issues</code>具体的链接</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">fix(api</span><span style="color:#A6ACCD;">): 修复上传API一些问题。</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">详情</span><span style="color:#89DDFF;">](</span><span style="color:#FFCB6B;">https://github.com/kviewui/lwu-request/issues/28</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="提交类型" tabindex="-1">提交类型 <a class="header-anchor" href="#提交类型" aria-label="Permalink to &quot;提交类型&quot;">​</a></h3><p>如果前缀是“feat”、“fix”或“perf”，它将出现在更新日志中。 然而其他任何 [BREAKING CHANGE](#footer 的变更, 都始终出现在变更日志中。</p><p>其他前缀由您决定。对于非变更日志相关的任务，建议使用“docs”、“chore”、“style”、“refract”和“test”前缀。</p><h3 id="更改范围" tabindex="-1">更改范围 <a class="header-anchor" href="#更改范围" aria-label="Permalink to &quot;更改范围&quot;">​</a></h3><p>提交范围可以是指定提交更改位置的任何内容。 例如 <code>api</code>, <code>config</code>, <code>guide</code>等等</p><h3 id="更改描述" tabindex="-1">更改描述 <a class="header-anchor" href="#更改描述" aria-label="Permalink to &quot;更改描述&quot;">​</a></h3><p>提交描述包含对变更的简洁描述：</p><ul><li>使用祈使句，现在时：“change”不是“changed”也不是“changes”</li><li>不要把首字母大写</li><li>不要用&quot;.&quot;结尾</li></ul><h3 id="更改内容" tabindex="-1">更改内容 <a class="header-anchor" href="#更改内容" aria-label="Permalink to &quot;更改内容&quot;">​</a></h3><p>更改内容应该包括修改的原因，并将其与之前的内容进行对比。</p><h3 id="页脚" tabindex="-1">页脚 <a class="header-anchor" href="#页脚" aria-label="Permalink to &quot;页脚&quot;">​</a></h3><p>页脚应包含有关 <strong>Breaking Changes</strong> 的任何信息， 也是引用GitHub问题，此提交 <strong>Closes</strong>.</p><p><strong>Breaking Changes</strong> 应以单词 <code>BREAKING CHANGE:</code> 开头， 并加一个空格或两行换行符。 提交内容的其余部分将用于此操作。</p>',23),t=[l];function p(c,r,i,h,D,d){return s(),o("div",null,t)}const u=a(n,[["render",p]]);export{F as __pageData,u as default};
